{"ast":null,"code":"import * as usersAPI from \"./users-api\";\nimport axios from \"axios\";\nexport async function signUp(userData) {\n  // Make the network request\n  const response = await usersAPI.signUp(userData);\n\n  // Retrieve the token\n  const data = response.data;\n\n  // Add the token to the localstorage\n  localStorage.setItem(\"data\", JSON.stringify(data));\n\n  // Baby step by returning whatever is sent back by the server\n  return response;\n}\n\n// Create a function to retrieve jwt from local storage\nexport const getToken = () => {\n  // Reach out to local storage and look for a token\n  const token = JSON.parse(localStorage.getItem(\"user\")).token;\n  console.log(token);\n\n  //   // Assuming no token was found\n  //   if (!token) return null;\n\n  //   // If the function reaches this point of the code that mean a token was found\n  //   const payload = JSON.parse(atob(token.split(\".\")[1]));\n\n  //   // Verify that the decoded payload is not expired\n  //   if (payload.exp < Number.parseInt(Date.now() / 1000)) {\n  //     // Meaning the jwt has expired\n  //     localStorage.removeItem(\"token\");\n\n  //     // return early\n  //     return null;\n  //   }\n\n  //   // Again if the code gets to this line it means that there was a token and the token was valid\n  //   return token;\n};","map":{"version":3,"names":["usersAPI","axios","signUp","userData","response","data","localStorage","setItem","JSON","stringify","getToken","token","parse","getItem","console","log"],"sources":["/Users/manaraali/Desktop/mern_app/frontend/src/utilities/users-service.js"],"sourcesContent":["import * as usersAPI from \"./users-api\";\nimport axios from \"axios\";\n\nexport async function signUp(userData) {\n  // Make the network request\n  const response = await usersAPI.signUp(userData);\n\n  // Retrieve the token\n  const data = response.data;\n\n  // Add the token to the localstorage\n  localStorage.setItem(\"data\", JSON.stringify(data));\n\n  // Baby step by returning whatever is sent back by the server\n  return response;\n}\n\n// Create a function to retrieve jwt from local storage\nexport const getToken = () => {\n  // Reach out to local storage and look for a token\n  const token = JSON.parse(localStorage.getItem(\"user\")).token;\n\n  console.log(token);\n\n  //   // Assuming no token was found\n  //   if (!token) return null;\n\n  //   // If the function reaches this point of the code that mean a token was found\n  //   const payload = JSON.parse(atob(token.split(\".\")[1]));\n\n  //   // Verify that the decoded payload is not expired\n  //   if (payload.exp < Number.parseInt(Date.now() / 1000)) {\n  //     // Meaning the jwt has expired\n  //     localStorage.removeItem(\"token\");\n\n  //     // return early\n  //     return null;\n  //   }\n\n  //   // Again if the code gets to this line it means that there was a token and the token was valid\n  //   return token;\n};\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,aAAa;AACvC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,eAAeC,MAAM,CAACC,QAAQ,EAAE;EACrC;EACA,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACE,MAAM,CAACC,QAAQ,CAAC;;EAEhD;EACA,MAAME,IAAI,GAAGD,QAAQ,CAACC,IAAI;;EAE1B;EACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;;EAElD;EACA,OAAOD,QAAQ;AACjB;;AAEA;AACA,OAAO,MAAMM,QAAQ,GAAG,MAAM;EAC5B;EACA,MAAMC,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACN,YAAY,CAACO,OAAO,CAAC,MAAM,CAAC,CAAC,CAACF,KAAK;EAE5DG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;;EAElB;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;AACF,CAAC"},"metadata":{},"sourceType":"module"}