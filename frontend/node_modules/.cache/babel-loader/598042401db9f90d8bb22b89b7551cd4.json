{"ast":null,"code":"import * as usersAPI from \"./users-api\";\nexport async function signUp(userData) {\n  // Make the network request\n  const response = await usersAPI.signUp(userData);\n\n  // Retrieve the token\n  const token = response.data.token;\n\n  // Add the token to the localstorage\n  localStorage.setItem(\"token\", token);\n\n  // Baby step by returning whatever is sent back by the server\n  return response;\n}\n\n// Create a function to retrieve jwt from local storage\nexport const getToken = () => {\n  // Reach out to local storage and look for a token\n  const token = localStorage.getItem(\"token\");\n\n  // Assuming no token was found\n  if (!token) return null;\n\n  // If the function reaches this point of the code that mean a token was found\n  const payload = JSON.parse(atob(token.split(\".\")[1]));\n\n  // Verify that the decoded payload is not expired\n  if (payload.exp < Number.parseInt(Date.now() / 1000)) {}\n};","map":{"version":3,"names":["usersAPI","signUp","userData","response","token","data","localStorage","setItem","getToken","getItem","payload","JSON","parse","atob","split","exp","Number","parseInt","Date","now"],"sources":["/Users/manaraali/Desktop/mern_app/frontend/src/utilities/users-service.js"],"sourcesContent":["import * as usersAPI from \"./users-api\";\n\nexport async function signUp(userData) {\n  // Make the network request\n  const response = await usersAPI.signUp(userData);\n\n  // Retrieve the token\n  const token = response.data.token;\n\n  // Add the token to the localstorage\n  localStorage.setItem(\"token\", token);\n\n  // Baby step by returning whatever is sent back by the server\n  return response;\n}\n\n// Create a function to retrieve jwt from local storage\nexport const getToken = () => {\n  // Reach out to local storage and look for a token\n  const token = localStorage.getItem(\"token\");\n\n  // Assuming no token was found\n  if (!token) return null;\n\n  // If the function reaches this point of the code that mean a token was found\n  const payload = JSON.parse(atob(token.split(\".\")[1]));\n\n  // Verify that the decoded payload is not expired\n  if (payload.exp < Number.parseInt(Date.now() / 1000)) {\n  }\n};\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,aAAa;AAEvC,OAAO,eAAeC,MAAM,CAACC,QAAQ,EAAE;EACrC;EACA,MAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACC,MAAM,CAACC,QAAQ,CAAC;;EAEhD;EACA,MAAME,KAAK,GAAGD,QAAQ,CAACE,IAAI,CAACD,KAAK;;EAEjC;EACAE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;;EAEpC;EACA,OAAOD,QAAQ;AACjB;;AAEA;AACA,OAAO,MAAMK,QAAQ,GAAG,MAAM;EAC5B;EACA,MAAMJ,KAAK,GAAGE,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAI,CAACL,KAAK,EAAE,OAAO,IAAI;;EAEvB;EACA,MAAMM,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAErD;EACA,IAAIJ,OAAO,CAACK,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CACtD;AACF,CAAC"},"metadata":{},"sourceType":"module"}